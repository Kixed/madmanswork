/*
 * Roaming REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * ChargingFacilitiesDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T18:37:18.317+01:00")
public class ChargingFacilitiesDTO {
  /**
   * Gets or Sets powerType
   */
  @JsonAdapter(PowerTypeEnum.Adapter.class)
  public enum PowerTypeEnum {
    AC_1_PHASE("AC_1_PHASE"),
    
    AC_3_PHASE("AC_3_PHASE"),
    
    DC("DC"),
    
    UNSPECIFIED("UNSPECIFIED");

    private String value;

    PowerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PowerTypeEnum fromValue(String text) {
      for (PowerTypeEnum b : PowerTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PowerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PowerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PowerTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("powerType")
  private PowerTypeEnum powerType = null;

  @SerializedName("power")
  private BigDecimal power = null;

  @SerializedName("amperage")
  private Integer amperage = null;

  @SerializedName("voltage")
  private Integer voltage = null;

  public ChargingFacilitiesDTO powerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
    return this;
  }

   /**
   * Get powerType
   * @return powerType
  **/
  @ApiModelProperty(value = "")
  public PowerTypeEnum getPowerType() {
    return powerType;
  }

  public void setPowerType(PowerTypeEnum powerType) {
    this.powerType = powerType;
  }

  public ChargingFacilitiesDTO power(BigDecimal power) {
    this.power = power;
    return this;
  }

   /**
   * Get power
   * @return power
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getPower() {
    return power;
  }

  public void setPower(BigDecimal power) {
    this.power = power;
  }

  public ChargingFacilitiesDTO amperage(Integer amperage) {
    this.amperage = amperage;
    return this;
  }

   /**
   * Get amperage
   * @return amperage
  **/
  @ApiModelProperty(value = "")
  public Integer getAmperage() {
    return amperage;
  }

  public void setAmperage(Integer amperage) {
    this.amperage = amperage;
  }

  public ChargingFacilitiesDTO voltage(Integer voltage) {
    this.voltage = voltage;
    return this;
  }

   /**
   * Get voltage
   * @return voltage
  **/
  @ApiModelProperty(value = "")
  public Integer getVoltage() {
    return voltage;
  }

  public void setVoltage(Integer voltage) {
    this.voltage = voltage;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargingFacilitiesDTO chargingFacilitiesDTO = (ChargingFacilitiesDTO) o;
    return Objects.equals(this.powerType, chargingFacilitiesDTO.powerType) &&
        Objects.equals(this.power, chargingFacilitiesDTO.power) &&
        Objects.equals(this.amperage, chargingFacilitiesDTO.amperage) &&
        Objects.equals(this.voltage, chargingFacilitiesDTO.voltage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(powerType, power, amperage, voltage);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargingFacilitiesDTO {\n");
    
    sb.append("    powerType: ").append(toIndentedString(powerType)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    amperage: ").append(toIndentedString(amperage)).append("\n");
    sb.append("    voltage: ").append(toIndentedString(voltage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

