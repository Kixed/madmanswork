/*
 * CS Management CSO REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Metadata object that contains available power types
 */
@ApiModel(description = "Metadata object that contains available power types")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:08:37.674+01:00")
public class ChargingFacilityMetadataDTO {
  /**
   * Gets or Sets powerTypes
   */
  @JsonAdapter(PowerTypesEnum.Adapter.class)
  public enum PowerTypesEnum {
    AC_1_PHASE("AC_1_PHASE"),
    
    AC_3_PHASE("AC_3_PHASE"),
    
    DC("DC"),
    
    UNSPECIFIED("UNSPECIFIED");

    private String value;

    PowerTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PowerTypesEnum fromValue(String text) {
      for (PowerTypesEnum b : PowerTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PowerTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PowerTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PowerTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("powerTypes")
  private List<PowerTypesEnum> powerTypes = null;

  public ChargingFacilityMetadataDTO powerTypes(List<PowerTypesEnum> powerTypes) {
    this.powerTypes = powerTypes;
    return this;
  }

  public ChargingFacilityMetadataDTO addPowerTypesItem(PowerTypesEnum powerTypesItem) {
    if (this.powerTypes == null) {
      this.powerTypes = new ArrayList<PowerTypesEnum>();
    }
    this.powerTypes.add(powerTypesItem);
    return this;
  }

   /**
   * Get powerTypes
   * @return powerTypes
  **/
  @ApiModelProperty(value = "")
  public List<PowerTypesEnum> getPowerTypes() {
    return powerTypes;
  }

  public void setPowerTypes(List<PowerTypesEnum> powerTypes) {
    this.powerTypes = powerTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargingFacilityMetadataDTO chargingFacilityMetadataDTO = (ChargingFacilityMetadataDTO) o;
    return Objects.equals(this.powerTypes, chargingFacilityMetadataDTO.powerTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(powerTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargingFacilityMetadataDTO {\n");
    
    sb.append("    powerTypes: ").append(toIndentedString(powerTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

