/*
 * CS Management CSO REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ChargingStationDataDTO;
import io.swagger.client.model.ChargingStationInfoDTO;
import io.swagger.client.model.ChargingStationStatusDataDTO;
import io.swagger.client.model.VersionedData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * ChargingStationDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:08:37.674+01:00")
public class ChargingStationDTO {
  @SerializedName("versionedData")
  private VersionedData versionedData = null;

  @SerializedName("externalChargingStationId")
  private String externalChargingStationId = null;

  /**
   * Gets or Sets protocol
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    OCPP15("OCPP15"),
    
    OCPP16J("OCPP16J");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String text) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ProtocolEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("protocol")
  private ProtocolEnum protocol = null;

  @SerializedName("remoteAddress")
  private String remoteAddress = null;

  @SerializedName("chargingStationInfo")
  private ChargingStationInfoDTO chargingStationInfo = null;

  @SerializedName("chargingStationData")
  private ChargingStationDataDTO chargingStationData = null;

  /**
   * Gets or Sets registrationStatus
   */
  @JsonAdapter(RegistrationStatusEnum.Adapter.class)
  public enum RegistrationStatusEnum {
    ACCEPTED("ACCEPTED"),
    
    PENDING("PENDING"),
    
    REJECTED("REJECTED"),
    
    PLANNED("PLANNED");

    private String value;

    RegistrationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegistrationStatusEnum fromValue(String text) {
      for (RegistrationStatusEnum b : RegistrationStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RegistrationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegistrationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegistrationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RegistrationStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("registrationStatus")
  private RegistrationStatusEnum registrationStatus = null;

  @SerializedName("chargingStationOperatorId")
  private Long chargingStationOperatorId = null;

  /**
   * Aggregated status of the charging station
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("AVAILABLE"),
    
    FAULTED("FAULTED"),
    
    OCCUPIED("OCCUPIED"),
    
    RESERVED("RESERVED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    EVSE_STATUS_UNKNOWN("EVSE_STATUS_UNKNOWN"),
    
    NO_EVSES("NO_EVSES"),
    
    OFFLINE("OFFLINE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("statusData")
  private ChargingStationStatusDataDTO statusData = null;

  @SerializedName("lastCommunication")
  private OffsetDateTime lastCommunication = null;

  @SerializedName("tags")
  private List<String> tags = null;

  public ChargingStationDTO versionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
    return this;
  }

   /**
   * Get versionedData
   * @return versionedData
  **/
  @ApiModelProperty(value = "")
  public VersionedData getVersionedData() {
    return versionedData;
  }

  public void setVersionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
  }

  public ChargingStationDTO externalChargingStationId(String externalChargingStationId) {
    this.externalChargingStationId = externalChargingStationId;
    return this;
  }

   /**
   * Get externalChargingStationId
   * @return externalChargingStationId
  **/
  @ApiModelProperty(required = true, value = "")
  public String getExternalChargingStationId() {
    return externalChargingStationId;
  }

  public void setExternalChargingStationId(String externalChargingStationId) {
    this.externalChargingStationId = externalChargingStationId;
  }

  public ChargingStationDTO protocol(ProtocolEnum protocol) {
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @ApiModelProperty(value = "")
  public ProtocolEnum getProtocol() {
    return protocol;
  }

  public void setProtocol(ProtocolEnum protocol) {
    this.protocol = protocol;
  }

  public ChargingStationDTO remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

   /**
   * Get remoteAddress
   * @return remoteAddress
  **/
  @ApiModelProperty(value = "")
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }

  public ChargingStationDTO chargingStationInfo(ChargingStationInfoDTO chargingStationInfo) {
    this.chargingStationInfo = chargingStationInfo;
    return this;
  }

   /**
   * Get chargingStationInfo
   * @return chargingStationInfo
  **/
  @ApiModelProperty(value = "")
  public ChargingStationInfoDTO getChargingStationInfo() {
    return chargingStationInfo;
  }

  public void setChargingStationInfo(ChargingStationInfoDTO chargingStationInfo) {
    this.chargingStationInfo = chargingStationInfo;
  }

  public ChargingStationDTO chargingStationData(ChargingStationDataDTO chargingStationData) {
    this.chargingStationData = chargingStationData;
    return this;
  }

   /**
   * Get chargingStationData
   * @return chargingStationData
  **/
  @ApiModelProperty(value = "")
  public ChargingStationDataDTO getChargingStationData() {
    return chargingStationData;
  }

  public void setChargingStationData(ChargingStationDataDTO chargingStationData) {
    this.chargingStationData = chargingStationData;
  }

  public ChargingStationDTO registrationStatus(RegistrationStatusEnum registrationStatus) {
    this.registrationStatus = registrationStatus;
    return this;
  }

   /**
   * Get registrationStatus
   * @return registrationStatus
  **/
  @ApiModelProperty(value = "")
  public RegistrationStatusEnum getRegistrationStatus() {
    return registrationStatus;
  }

  public void setRegistrationStatus(RegistrationStatusEnum registrationStatus) {
    this.registrationStatus = registrationStatus;
  }

  public ChargingStationDTO chargingStationOperatorId(Long chargingStationOperatorId) {
    this.chargingStationOperatorId = chargingStationOperatorId;
    return this;
  }

   /**
   * Internal ID of the operator
   * @return chargingStationOperatorId
  **/
  @ApiModelProperty(value = "Internal ID of the operator")
  public Long getChargingStationOperatorId() {
    return chargingStationOperatorId;
  }

  public void setChargingStationOperatorId(Long chargingStationOperatorId) {
    this.chargingStationOperatorId = chargingStationOperatorId;
  }

  public ChargingStationDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Aggregated status of the charging station
   * @return status
  **/
  @ApiModelProperty(value = "Aggregated status of the charging station")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

   /**
   * Status data for charging station itself
   * @return statusData
  **/
  @ApiModelProperty(value = "Status data for charging station itself")
  public ChargingStationStatusDataDTO getStatusData() {
    return statusData;
  }

   /**
   * Timestamp when the last message from the charging station was received.
   * @return lastCommunication
  **/
  @ApiModelProperty(value = "Timestamp when the last message from the charging station was received.")
  public OffsetDateTime getLastCommunication() {
    return lastCommunication;
  }

  public ChargingStationDTO tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ChargingStationDTO addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @ApiModelProperty(value = "")
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargingStationDTO chargingStationDTO = (ChargingStationDTO) o;
    return Objects.equals(this.versionedData, chargingStationDTO.versionedData) &&
        Objects.equals(this.externalChargingStationId, chargingStationDTO.externalChargingStationId) &&
        Objects.equals(this.protocol, chargingStationDTO.protocol) &&
        Objects.equals(this.remoteAddress, chargingStationDTO.remoteAddress) &&
        Objects.equals(this.chargingStationInfo, chargingStationDTO.chargingStationInfo) &&
        Objects.equals(this.chargingStationData, chargingStationDTO.chargingStationData) &&
        Objects.equals(this.registrationStatus, chargingStationDTO.registrationStatus) &&
        Objects.equals(this.chargingStationOperatorId, chargingStationDTO.chargingStationOperatorId) &&
        Objects.equals(this.status, chargingStationDTO.status) &&
        Objects.equals(this.statusData, chargingStationDTO.statusData) &&
        Objects.equals(this.lastCommunication, chargingStationDTO.lastCommunication) &&
        Objects.equals(this.tags, chargingStationDTO.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionedData, externalChargingStationId, protocol, remoteAddress, chargingStationInfo, chargingStationData, registrationStatus, chargingStationOperatorId, status, statusData, lastCommunication, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargingStationDTO {\n");
    
    sb.append("    versionedData: ").append(toIndentedString(versionedData)).append("\n");
    sb.append("    externalChargingStationId: ").append(toIndentedString(externalChargingStationId)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    chargingStationInfo: ").append(toIndentedString(chargingStationInfo)).append("\n");
    sb.append("    chargingStationData: ").append(toIndentedString(chargingStationData)).append("\n");
    sb.append("    registrationStatus: ").append(toIndentedString(registrationStatus)).append("\n");
    sb.append("    chargingStationOperatorId: ").append(toIndentedString(chargingStationOperatorId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusData: ").append(toIndentedString(statusData)).append("\n");
    sb.append("    lastCommunication: ").append(toIndentedString(lastCommunication)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

