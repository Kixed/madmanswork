/*
 * CS Management CSO REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ChargingStationDTO;
import io.swagger.client.model.EvseDataDto;
import io.swagger.client.model.VersionedData;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * EvseDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:08:37.674+01:00")
public class EvseDTO {
  @SerializedName("versionedData")
  private VersionedData versionedData = null;

  @SerializedName("externalChargingStationId")
  private String externalChargingStationId = null;

  @SerializedName("externalEvseId")
  private Integer externalEvseId = null;

  /**
   * Gets or Sets errorCode
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    CONNECTOR_LOCK_FAILURE("CONNECTOR_LOCK_FAILURE"),
    
    EV_COMMUNICATION_ERROR("EV_COMMUNICATION_ERROR"),
    
    GROUND_FAILURE("GROUND_FAILURE"),
    
    HIGH_TEMPERATURE("HIGH_TEMPERATURE"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    LOCAL_LIST_CONFLICT("LOCAL_LIST_CONFLICT"),
    
    NO_ERROR("NO_ERROR"),
    
    OTHER_ERROR("OTHER_ERROR"),
    
    OVER_CURRENT_FAILURE("OVER_CURRENT_FAILURE"),
    
    POWER_METER_FAILURE("POWER_METER_FAILURE"),
    
    POWER_SWITCH_FAILURE("POWER_SWITCH_FAILURE"),
    
    READER_FAILURE("READER_FAILURE"),
    
    RESET_FAILURE("RESET_FAILURE"),
    
    UNDER_VOLTAGE("UNDER_VOLTAGE"),
    
    OVER_VOLTAGE("OVER_VOLTAGE"),
    
    WEAK_SIGNAL("WEAK_SIGNAL");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String text) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("errorCode")
  private ErrorCodeEnum errorCode = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("AVAILABLE"),
    
    PREPARING("PREPARING"),
    
    CHARGING("CHARGING"),
    
    SUSPENDED_EVSE("SUSPENDED_EVSE"),
    
    SUSPENDED_EV("SUSPENDED_EV"),
    
    FINISHING("FINISHING"),
    
    OCCUPIED("OCCUPIED"),
    
    RESERVED("RESERVED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    FAULTED("FAULTED"),
    
    OFFLINE("OFFLINE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("evseId")
  private String evseId = null;

  @SerializedName("info")
  private String info = null;

  @SerializedName("lastStatusNotificationTimestamp")
  private OffsetDateTime lastStatusNotificationTimestamp = null;

  @SerializedName("vendorId")
  private String vendorId = null;

  @SerializedName("vendorErrorCode")
  private String vendorErrorCode = null;

  @SerializedName("lastUpdate")
  private OffsetDateTime lastUpdate = null;

  @SerializedName("chargingStation")
  private ChargingStationDTO chargingStation = null;

  @SerializedName("evseData")
  private EvseDataDto evseData = null;

  public EvseDTO versionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
    return this;
  }

   /**
   * Get versionedData
   * @return versionedData
  **/
  @ApiModelProperty(value = "")
  public VersionedData getVersionedData() {
    return versionedData;
  }

  public void setVersionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
  }

  public EvseDTO externalChargingStationId(String externalChargingStationId) {
    this.externalChargingStationId = externalChargingStationId;
    return this;
  }

   /**
   * Official charging station ID, unique per operator
   * @return externalChargingStationId
  **/
  @ApiModelProperty(required = true, value = "Official charging station ID, unique per operator")
  public String getExternalChargingStationId() {
    return externalChargingStationId;
  }

  public void setExternalChargingStationId(String externalChargingStationId) {
    this.externalChargingStationId = externalChargingStationId;
  }

  public EvseDTO externalEvseId(Integer externalEvseId) {
    this.externalEvseId = externalEvseId;
    return this;
  }

   /**
   * OCPP 1.x: connector ID, unique only per charging station
   * @return externalEvseId
  **/
  @ApiModelProperty(required = true, value = "OCPP 1.x: connector ID, unique only per charging station")
  public Integer getExternalEvseId() {
    return externalEvseId;
  }

  public void setExternalEvseId(Integer externalEvseId) {
    this.externalEvseId = externalEvseId;
  }

  public EvseDTO errorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Get errorCode
   * @return errorCode
  **/
  @ApiModelProperty(required = true, value = "")
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }

  public EvseDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(required = true, value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

   /**
   * Public EVSE ID, globally unique
   * @return evseId
  **/
  @ApiModelProperty(value = "Public EVSE ID, globally unique")
  public String getEvseId() {
    return evseId;
  }

  public EvseDTO info(String info) {
    this.info = info;
    return this;
  }

   /**
   * Status info
   * @return info
  **/
  @ApiModelProperty(value = "Status info")
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }

   /**
   * Timestamp of the last StatusNotification from the charging station. This field contains the optional timestamp as given by the charging station&#39;s internal clock. For most use cases the lastUpdate property is a better fit.
   * @return lastStatusNotificationTimestamp
  **/
  @ApiModelProperty(value = "Timestamp of the last StatusNotification from the charging station. This field contains the optional timestamp as given by the charging station's internal clock. For most use cases the lastUpdate property is a better fit.")
  public OffsetDateTime getLastStatusNotificationTimestamp() {
    return lastStatusNotificationTimestamp;
  }

  public EvseDTO vendorId(String vendorId) {
    this.vendorId = vendorId;
    return this;
  }

   /**
   * Vendor specific status code
   * @return vendorId
  **/
  @ApiModelProperty(value = "Vendor specific status code")
  public String getVendorId() {
    return vendorId;
  }

  public void setVendorId(String vendorId) {
    this.vendorId = vendorId;
  }

  public EvseDTO vendorErrorCode(String vendorErrorCode) {
    this.vendorErrorCode = vendorErrorCode;
    return this;
  }

   /**
   * Vendor specific error code
   * @return vendorErrorCode
  **/
  @ApiModelProperty(value = "Vendor specific error code")
  public String getVendorErrorCode() {
    return vendorErrorCode;
  }

  public void setVendorErrorCode(String vendorErrorCode) {
    this.vendorErrorCode = vendorErrorCode;
  }

   /**
   * Last update of the EVSE static or dynamic data including the status. This field is updated for Evse, EvseData and the status. Audience: Syncing to roaming platform.
   * @return lastUpdate
  **/
  @ApiModelProperty(value = "Last update of the EVSE static or dynamic data including the status. This field is updated for Evse, EvseData and the status. Audience: Syncing to roaming platform.")
  public OffsetDateTime getLastUpdate() {
    return lastUpdate;
  }

   /**
   * Read-only copy of the charging station object
   * @return chargingStation
  **/
  @ApiModelProperty(value = "Read-only copy of the charging station object")
  public ChargingStationDTO getChargingStation() {
    return chargingStation;
  }

  public EvseDTO evseData(EvseDataDto evseData) {
    this.evseData = evseData;
    return this;
  }

   /**
   * Get evseData
   * @return evseData
  **/
  @ApiModelProperty(value = "")
  public EvseDataDto getEvseData() {
    return evseData;
  }

  public void setEvseData(EvseDataDto evseData) {
    this.evseData = evseData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvseDTO evseDTO = (EvseDTO) o;
    return Objects.equals(this.versionedData, evseDTO.versionedData) &&
        Objects.equals(this.externalChargingStationId, evseDTO.externalChargingStationId) &&
        Objects.equals(this.externalEvseId, evseDTO.externalEvseId) &&
        Objects.equals(this.errorCode, evseDTO.errorCode) &&
        Objects.equals(this.status, evseDTO.status) &&
        Objects.equals(this.evseId, evseDTO.evseId) &&
        Objects.equals(this.info, evseDTO.info) &&
        Objects.equals(this.lastStatusNotificationTimestamp, evseDTO.lastStatusNotificationTimestamp) &&
        Objects.equals(this.vendorId, evseDTO.vendorId) &&
        Objects.equals(this.vendorErrorCode, evseDTO.vendorErrorCode) &&
        Objects.equals(this.lastUpdate, evseDTO.lastUpdate) &&
        Objects.equals(this.chargingStation, evseDTO.chargingStation) &&
        Objects.equals(this.evseData, evseDTO.evseData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionedData, externalChargingStationId, externalEvseId, errorCode, status, evseId, info, lastStatusNotificationTimestamp, vendorId, vendorErrorCode, lastUpdate, chargingStation, evseData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvseDTO {\n");
    
    sb.append("    versionedData: ").append(toIndentedString(versionedData)).append("\n");
    sb.append("    externalChargingStationId: ").append(toIndentedString(externalChargingStationId)).append("\n");
    sb.append("    externalEvseId: ").append(toIndentedString(externalEvseId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    evseId: ").append(toIndentedString(evseId)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    lastStatusNotificationTimestamp: ").append(toIndentedString(lastStatusNotificationTimestamp)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    vendorErrorCode: ").append(toIndentedString(vendorErrorCode)).append("\n");
    sb.append("    lastUpdate: ").append(toIndentedString(lastUpdate)).append("\n");
    sb.append("    chargingStation: ").append(toIndentedString(chargingStation)).append("\n");
    sb.append("    evseData: ").append(toIndentedString(evseData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

