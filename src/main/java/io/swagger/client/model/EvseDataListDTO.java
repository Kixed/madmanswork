/*
 * CS Management CSO REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ChargingFacilityListDTO;
import io.swagger.client.model.VersionedData;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * EvseDataListDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:08:37.674+01:00")
public class EvseDataListDTO {
  @SerializedName("versionedData")
  private VersionedData versionedData = null;

  /**
   * Gets or Sets chargingModes
   */
  @JsonAdapter(ChargingModesEnum.Adapter.class)
  public enum ChargingModesEnum {
    MODE_1("MODE_1"),
    
    MODE_2("MODE_2"),
    
    MODE_3("MODE_3"),
    
    MODE_4("MODE_4"),
    
    CHADEMO("CHADEMO");

    private String value;

    ChargingModesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChargingModesEnum fromValue(String text) {
      for (ChargingModesEnum b : ChargingModesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ChargingModesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChargingModesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChargingModesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ChargingModesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("chargingModes")
  private List<ChargingModesEnum> chargingModes = null;

  /**
   * Gets or Sets plugTypes
   */
  @JsonAdapter(PlugTypesEnum.Adapter.class)
  public enum PlugTypesEnum {
    SMALL_PADDLE_INDUCTIVE("SMALL_PADDLE_INDUCTIVE"),
    
    LARGE_PADDLE_INDUCTIVE("LARGE_PADDLE_INDUCTIVE"),
    
    AVCON_CONNECTOR("AVCON_CONNECTOR"),
    
    TESLA_CONNECTOR("TESLA_CONNECTOR"),
    
    NEMA_5_20("NEMA_5_20"),
    
    TYPE_E_FRENCH_STANDARD("TYPE_E_FRENCH_STANDARD"),
    
    TYPE_F_SCHUKO("TYPE_F_SCHUKO"),
    
    TYPE_G_BRITISH_STANDARD("TYPE_G_BRITISH_STANDARD"),
    
    TYPE_J_SWISS_STANDARD("TYPE_J_SWISS_STANDARD"),
    
    TYPE_1_CONNECTOR_CABLE_ATTACHED("TYPE_1_CONNECTOR_CABLE_ATTACHED"),
    
    TYPE_2_OUTLET("TYPE_2_OUTLET"),
    
    TYPE_2_CONNECTOR_CABLE_ATTACHED("TYPE_2_CONNECTOR_CABLE_ATTACHED"),
    
    TYPE_3_OUTLET("TYPE_3_OUTLET"),
    
    IEC_60309_SINGLE_PHASE("IEC_60309_SINGLE_PHASE"),
    
    IEC_60309_THREE_PHASE("IEC_60309_THREE_PHASE"),
    
    CCS_COMBO_2_PLUG_CABLE_ATTACHED("CCS_COMBO_2_PLUG_CABLE_ATTACHED"),
    
    CCS_COMBO_1_PLUG_CABLE_ATTACHED("CCS_COMBO_1_PLUG_CABLE_ATTACHED"),
    
    CHADEMO("CHADEMO"),
    
    UNSPECIFIED("UNSPECIFIED");

    private String value;

    PlugTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlugTypesEnum fromValue(String text) {
      for (PlugTypesEnum b : PlugTypesEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PlugTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlugTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlugTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PlugTypesEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("plugTypes")
  private List<PlugTypesEnum> plugTypes = null;

  @SerializedName("chargingFacilities")
  private List<ChargingFacilityListDTO> chargingFacilities = null;

  @SerializedName("maxCapacity")
  private Integer maxCapacity = null;

  @SerializedName("changedOn")
  private OffsetDateTime changedOn = null;

  @SerializedName("createdOn")
  private OffsetDateTime createdOn = null;

  public EvseDataListDTO versionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
    return this;
  }

   /**
   * Get versionedData
   * @return versionedData
  **/
  @ApiModelProperty(value = "")
  public VersionedData getVersionedData() {
    return versionedData;
  }

  public void setVersionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
  }

  public EvseDataListDTO chargingModes(List<ChargingModesEnum> chargingModes) {
    this.chargingModes = chargingModes;
    return this;
  }

  public EvseDataListDTO addChargingModesItem(ChargingModesEnum chargingModesItem) {
    if (this.chargingModes == null) {
      this.chargingModes = new ArrayList<ChargingModesEnum>();
    }
    this.chargingModes.add(chargingModesItem);
    return this;
  }

   /**
   * Get chargingModes
   * @return chargingModes
  **/
  @ApiModelProperty(value = "")
  public List<ChargingModesEnum> getChargingModes() {
    return chargingModes;
  }

  public void setChargingModes(List<ChargingModesEnum> chargingModes) {
    this.chargingModes = chargingModes;
  }

  public EvseDataListDTO plugTypes(List<PlugTypesEnum> plugTypes) {
    this.plugTypes = plugTypes;
    return this;
  }

  public EvseDataListDTO addPlugTypesItem(PlugTypesEnum plugTypesItem) {
    if (this.plugTypes == null) {
      this.plugTypes = new ArrayList<PlugTypesEnum>();
    }
    this.plugTypes.add(plugTypesItem);
    return this;
  }

   /**
   * Get plugTypes
   * @return plugTypes
  **/
  @ApiModelProperty(value = "")
  public List<PlugTypesEnum> getPlugTypes() {
    return plugTypes;
  }

  public void setPlugTypes(List<PlugTypesEnum> plugTypes) {
    this.plugTypes = plugTypes;
  }

  public EvseDataListDTO chargingFacilities(List<ChargingFacilityListDTO> chargingFacilities) {
    this.chargingFacilities = chargingFacilities;
    return this;
  }

  public EvseDataListDTO addChargingFacilitiesItem(ChargingFacilityListDTO chargingFacilitiesItem) {
    if (this.chargingFacilities == null) {
      this.chargingFacilities = new ArrayList<ChargingFacilityListDTO>();
    }
    this.chargingFacilities.add(chargingFacilitiesItem);
    return this;
  }

   /**
   * Get chargingFacilities
   * @return chargingFacilities
  **/
  @ApiModelProperty(value = "")
  public List<ChargingFacilityListDTO> getChargingFacilities() {
    return chargingFacilities;
  }

  public void setChargingFacilities(List<ChargingFacilityListDTO> chargingFacilities) {
    this.chargingFacilities = chargingFacilities;
  }

  public EvseDataListDTO maxCapacity(Integer maxCapacity) {
    this.maxCapacity = maxCapacity;
    return this;
  }

   /**
   * Get maxCapacity
   * @return maxCapacity
  **/
  @ApiModelProperty(value = "")
  public Integer getMaxCapacity() {
    return maxCapacity;
  }

  public void setMaxCapacity(Integer maxCapacity) {
    this.maxCapacity = maxCapacity;
  }

  public EvseDataListDTO changedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
    return this;
  }

   /**
   * Get changedOn
   * @return changedOn
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getChangedOn() {
    return changedOn;
  }

  public void setChangedOn(OffsetDateTime changedOn) {
    this.changedOn = changedOn;
  }

  public EvseDataListDTO createdOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Get createdOn
   * @return createdOn
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }

  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EvseDataListDTO evseDataListDTO = (EvseDataListDTO) o;
    return Objects.equals(this.versionedData, evseDataListDTO.versionedData) &&
        Objects.equals(this.chargingModes, evseDataListDTO.chargingModes) &&
        Objects.equals(this.plugTypes, evseDataListDTO.plugTypes) &&
        Objects.equals(this.chargingFacilities, evseDataListDTO.chargingFacilities) &&
        Objects.equals(this.maxCapacity, evseDataListDTO.maxCapacity) &&
        Objects.equals(this.changedOn, evseDataListDTO.changedOn) &&
        Objects.equals(this.createdOn, evseDataListDTO.createdOn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(versionedData, chargingModes, plugTypes, chargingFacilities, maxCapacity, changedOn, createdOn);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EvseDataListDTO {\n");
    
    sb.append("    versionedData: ").append(toIndentedString(versionedData)).append("\n");
    sb.append("    chargingModes: ").append(toIndentedString(chargingModes)).append("\n");
    sb.append("    plugTypes: ").append(toIndentedString(plugTypes)).append("\n");
    sb.append("    chargingFacilities: ").append(toIndentedString(chargingFacilities)).append("\n");
    sb.append("    maxCapacity: ").append(toIndentedString(maxCapacity)).append("\n");
    sb.append("    changedOn: ").append(toIndentedString(changedOn)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

