/*
 * Roaming REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * RFIDIdentification
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T18:37:18.317+01:00")
public class RFIDIdentification {
  @SerializedName("EvcoID")
  private String evcoID = null;

  @SerializedName("ExpiryDate")
  private OffsetDateTime expiryDate = null;

  @SerializedName("PrintedNumber")
  private String printedNumber = null;

  /**
   * Gets or Sets RFID
   */
  @JsonAdapter(RFIDEnum.Adapter.class)
  public enum RFIDEnum {
    MIFARECLS("MIFARECLS"),
    
    MIFAREDES("MIFAREDES"),
    
    CALYPSO("CALYPSO"),
    
    NFC("NFC"),
    
    MIFAREFAMILY("MIFAREFAMILY");

    private String value;

    RFIDEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RFIDEnum fromValue(String text) {
      for (RFIDEnum b : RFIDEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<RFIDEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RFIDEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RFIDEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RFIDEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("RFID")
  private RFIDEnum RFID = null;

  @SerializedName("UID")
  private String UID = null;

  public RFIDIdentification evcoID(String evcoID) {
    this.evcoID = evcoID;
    return this;
  }

   /**
   * Get evcoID
   * @return evcoID
  **/
  @ApiModelProperty(value = "")
  public String getEvcoID() {
    return evcoID;
  }

  public void setEvcoID(String evcoID) {
    this.evcoID = evcoID;
  }

  public RFIDIdentification expiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(OffsetDateTime expiryDate) {
    this.expiryDate = expiryDate;
  }

  public RFIDIdentification printedNumber(String printedNumber) {
    this.printedNumber = printedNumber;
    return this;
  }

   /**
   * Get printedNumber
   * @return printedNumber
  **/
  @ApiModelProperty(value = "")
  public String getPrintedNumber() {
    return printedNumber;
  }

  public void setPrintedNumber(String printedNumber) {
    this.printedNumber = printedNumber;
  }

  public RFIDIdentification RFID(RFIDEnum RFID) {
    this.RFID = RFID;
    return this;
  }

   /**
   * Get RFID
   * @return RFID
  **/
  @ApiModelProperty(required = true, value = "")
  public RFIDEnum getRFID() {
    return RFID;
  }

  public void setRFID(RFIDEnum RFID) {
    this.RFID = RFID;
  }

  public RFIDIdentification UID(String UID) {
    this.UID = UID;
    return this;
  }

   /**
   * Get UID
   * @return UID
  **/
  @ApiModelProperty(required = true, value = "")
  public String getUID() {
    return UID;
  }

  public void setUID(String UID) {
    this.UID = UID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RFIDIdentification rfIDIdentification = (RFIDIdentification) o;
    return Objects.equals(this.evcoID, rfIDIdentification.evcoID) &&
        Objects.equals(this.expiryDate, rfIDIdentification.expiryDate) &&
        Objects.equals(this.printedNumber, rfIDIdentification.printedNumber) &&
        Objects.equals(this.RFID, rfIDIdentification.RFID) &&
        Objects.equals(this.UID, rfIDIdentification.UID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evcoID, expiryDate, printedNumber, RFID, UID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RFIDIdentification {\n");
    
    sb.append("    evcoID: ").append(toIndentedString(evcoID)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    printedNumber: ").append(toIndentedString(printedNumber)).append("\n");
    sb.append("    RFID: ").append(toIndentedString(RFID)).append("\n");
    sb.append("    UID: ").append(toIndentedString(UID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

