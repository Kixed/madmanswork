/*
 * CS Communicator REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.VersionedData;
import java.io.IOException;

/**
 * RemoteStartExternalResponseDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:06:01.588+01:00")
public class RemoteStartExternalResponseDTO {
  @SerializedName("csoSessionId")
  private String csoSessionId = null;

  @SerializedName("evseId")
  private String evseId = null;

  @SerializedName("idTag")
  private String idTag = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING_REMOTE_START_REQUEST("PENDING_REMOTE_START_REQUEST"),
    
    PENDING_REMOTE_START_RESPONSE("PENDING_REMOTE_START_RESPONSE"),
    
    REJECTED_BY_CHARGING_STATION("REJECTED_BY_CHARGING_STATION"),
    
    REJECTED_BY_CENTRAL_SYSTEM("REJECTED_BY_CENTRAL_SYSTEM"),
    
    PENDING_START_TRANSACTION("PENDING_START_TRANSACTION"),
    
    CHARGING("CHARGING"),
    
    PENDING_STOP_TRANSACTION("PENDING_STOP_TRANSACTION"),
    
    FINISHED("FINISHED"),
    
    FAILURE("FAILURE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("versionedData")
  private VersionedData versionedData = null;

  public RemoteStartExternalResponseDTO csoSessionId(String csoSessionId) {
    this.csoSessionId = csoSessionId;
    return this;
  }

   /**
   * Get csoSessionId
   * @return csoSessionId
  **/
  @ApiModelProperty(required = true, value = "")
  public String getCsoSessionId() {
    return csoSessionId;
  }

  public void setCsoSessionId(String csoSessionId) {
    this.csoSessionId = csoSessionId;
  }

  public RemoteStartExternalResponseDTO evseId(String evseId) {
    this.evseId = evseId;
    return this;
  }

   /**
   * Get evseId
   * @return evseId
  **/
  @ApiModelProperty(required = true, value = "")
  public String getEvseId() {
    return evseId;
  }

  public void setEvseId(String evseId) {
    this.evseId = evseId;
  }

  public RemoteStartExternalResponseDTO idTag(String idTag) {
    this.idTag = idTag;
    return this;
  }

   /**
   * Get idTag
   * @return idTag
  **/
  @ApiModelProperty(value = "")
  public String getIdTag() {
    return idTag;
  }

  public void setIdTag(String idTag) {
    this.idTag = idTag;
  }

  public RemoteStartExternalResponseDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(required = true, value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public RemoteStartExternalResponseDTO versionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
    return this;
  }

   /**
   * Get versionedData
   * @return versionedData
  **/
  @ApiModelProperty(value = "")
  public VersionedData getVersionedData() {
    return versionedData;
  }

  public void setVersionedData(VersionedData versionedData) {
    this.versionedData = versionedData;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RemoteStartExternalResponseDTO remoteStartExternalResponseDTO = (RemoteStartExternalResponseDTO) o;
    return Objects.equals(this.csoSessionId, remoteStartExternalResponseDTO.csoSessionId) &&
        Objects.equals(this.evseId, remoteStartExternalResponseDTO.evseId) &&
        Objects.equals(this.idTag, remoteStartExternalResponseDTO.idTag) &&
        Objects.equals(this.status, remoteStartExternalResponseDTO.status) &&
        Objects.equals(this.versionedData, remoteStartExternalResponseDTO.versionedData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csoSessionId, evseId, idTag, status, versionedData);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RemoteStartExternalResponseDTO {\n");
    
    sb.append("    csoSessionId: ").append(toIndentedString(csoSessionId)).append("\n");
    sb.append("    evseId: ").append(toIndentedString(evseId)).append("\n");
    sb.append("    idTag: ").append(toIndentedString(idTag)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    versionedData: ").append(toIndentedString(versionedData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

