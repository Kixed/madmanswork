/*
 * CS Communicator REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SampledValueDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:06:01.588+01:00")
public class SampledValueDTO {
  @SerializedName("value")
  private String value = null;

  /**
   * Gets or Sets context
   */
  @JsonAdapter(ContextEnum.Adapter.class)
  public enum ContextEnum {
    INTERRUPTION_BEGIN("INTERRUPTION_BEGIN"),
    
    INTERRUPTION_END("INTERRUPTION_END"),
    
    SAMPLE_CLOCK("SAMPLE_CLOCK"),
    
    SAMPLE_PERIODIC("SAMPLE_PERIODIC"),
    
    TRANSACTION_BEGIN("TRANSACTION_BEGIN"),
    
    TRANSACTION_END("TRANSACTION_END"),
    
    TRIGGER("TRIGGER"),
    
    OTHER("OTHER");

    private String value;

    ContextEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContextEnum fromValue(String text) {
      for (ContextEnum b : ContextEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContextEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContextEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContextEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContextEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("context")
  private ContextEnum context = null;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    RAW("RAW"),
    
    SIGNED_DATA("SIGNED_DATA");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String text) {
      for (FormatEnum b : FormatEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FormatEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("format")
  private FormatEnum format = null;

  /**
   * Gets or Sets measurand
   */
  @JsonAdapter(MeasurandEnum.Adapter.class)
  public enum MeasurandEnum {
    ENERGY_ACTIVE_EXPORT_REGISTER("ENERGY_ACTIVE_EXPORT_REGISTER"),
    
    ENERGY_ACTIVE_IMPORT_REGISTER("ENERGY_ACTIVE_IMPORT_REGISTER"),
    
    ENERGY_REACTIVE_EXPORT_REGISTER("ENERGY_REACTIVE_EXPORT_REGISTER"),
    
    ENERGY_REACTIVE_IMPORT_REGISTER("ENERGY_REACTIVE_IMPORT_REGISTER"),
    
    ENERGY_ACTIVE_EXPORT_INTERVAL("ENERGY_ACTIVE_EXPORT_INTERVAL"),
    
    ENERGY_ACTIVE_IMPORT_INTERVAL("ENERGY_ACTIVE_IMPORT_INTERVAL"),
    
    ENERGY_REACTIVE_EXPORT_INTERVAL("ENERGY_REACTIVE_EXPORT_INTERVAL"),
    
    ENERGY_REACTIVE_IMPORT_INTERVAL("ENERGY_REACTIVE_IMPORT_INTERVAL"),
    
    POWER_ACTIVE_EXPORT("POWER_ACTIVE_EXPORT"),
    
    POWER_ACTIVE_IMPORT("POWER_ACTIVE_IMPORT"),
    
    POWER_OFFERED("POWER_OFFERED"),
    
    POWER_REACTIVE_EXPORT("POWER_REACTIVE_EXPORT"),
    
    POWER_REACTIVE_IMPORT("POWER_REACTIVE_IMPORT"),
    
    POWER_FACTOR("POWER_FACTOR"),
    
    CURRENT_IMPORT("CURRENT_IMPORT"),
    
    CURRENT_EXPORT("CURRENT_EXPORT"),
    
    CURRENT_OFFERED("CURRENT_OFFERED"),
    
    VOLTAGE("VOLTAGE"),
    
    FREQUENCY("FREQUENCY"),
    
    TEMPERATURE("TEMPERATURE"),
    
    SO_C("SO_C"),
    
    RPM("RPM");

    private String value;

    MeasurandEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MeasurandEnum fromValue(String text) {
      for (MeasurandEnum b : MeasurandEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MeasurandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MeasurandEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MeasurandEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MeasurandEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("measurand")
  private MeasurandEnum measurand = null;

  /**
   * Gets or Sets phase
   */
  @JsonAdapter(PhaseEnum.Adapter.class)
  public enum PhaseEnum {
    L_1("L_1"),
    
    L_2("L_2"),
    
    L_3("L_3"),
    
    N("N"),
    
    L_1_N("L_1_N"),
    
    L_2_N("L_2_N"),
    
    L_3_N("L_3_N"),
    
    L_1_L_2("L_1_L_2"),
    
    L_2_L_3("L_2_L_3"),
    
    L_3_L_1("L_3_L_1");

    private String value;

    PhaseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseEnum fromValue(String text) {
      for (PhaseEnum b : PhaseEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PhaseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PhaseEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("phase")
  private PhaseEnum phase = null;

  /**
   * Gets or Sets location
   */
  @JsonAdapter(LocationEnum.Adapter.class)
  public enum LocationEnum {
    CABLE("CABLE"),
    
    EV("EV"),
    
    INLET("INLET"),
    
    OUTLET("OUTLET"),
    
    BODY("BODY");

    private String value;

    LocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationEnum fromValue(String text) {
      for (LocationEnum b : LocationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<LocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return LocationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("location")
  private LocationEnum location = null;

  /**
   * Gets or Sets unit
   */
  @JsonAdapter(UnitEnum.Adapter.class)
  public enum UnitEnum {
    WH("WH"),
    
    K_WH("K_WH"),
    
    VARH("VARH"),
    
    KVARH("KVARH"),
    
    W("W"),
    
    K_W("K_W"),
    
    VA("VA"),
    
    K_VA("K_VA"),
    
    VAR("VAR"),
    
    KVAR("KVAR"),
    
    A("A"),
    
    V("V"),
    
    K("K"),
    
    CELCIUS("CELCIUS"),
    
    FAHRENHEIT("FAHRENHEIT"),
    
    PERCENT("PERCENT");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String text) {
      for (UnitEnum b : UnitEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return UnitEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("unit")
  private UnitEnum unit = null;

  public SampledValueDTO value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @ApiModelProperty(required = true, value = "")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public SampledValueDTO context(ContextEnum context) {
    this.context = context;
    return this;
  }

   /**
   * Get context
   * @return context
  **/
  @ApiModelProperty(value = "")
  public ContextEnum getContext() {
    return context;
  }

  public void setContext(ContextEnum context) {
    this.context = context;
  }

  public SampledValueDTO format(FormatEnum format) {
    this.format = format;
    return this;
  }

   /**
   * Get format
   * @return format
  **/
  @ApiModelProperty(value = "")
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }

  public SampledValueDTO measurand(MeasurandEnum measurand) {
    this.measurand = measurand;
    return this;
  }

   /**
   * Get measurand
   * @return measurand
  **/
  @ApiModelProperty(value = "")
  public MeasurandEnum getMeasurand() {
    return measurand;
  }

  public void setMeasurand(MeasurandEnum measurand) {
    this.measurand = measurand;
  }

  public SampledValueDTO phase(PhaseEnum phase) {
    this.phase = phase;
    return this;
  }

   /**
   * Get phase
   * @return phase
  **/
  @ApiModelProperty(value = "")
  public PhaseEnum getPhase() {
    return phase;
  }

  public void setPhase(PhaseEnum phase) {
    this.phase = phase;
  }

  public SampledValueDTO location(LocationEnum location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @ApiModelProperty(value = "")
  public LocationEnum getLocation() {
    return location;
  }

  public void setLocation(LocationEnum location) {
    this.location = location;
  }

  public SampledValueDTO unit(UnitEnum unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @ApiModelProperty(value = "")
  public UnitEnum getUnit() {
    return unit;
  }

  public void setUnit(UnitEnum unit) {
    this.unit = unit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SampledValueDTO sampledValueDTO = (SampledValueDTO) o;
    return Objects.equals(this.value, sampledValueDTO.value) &&
        Objects.equals(this.context, sampledValueDTO.context) &&
        Objects.equals(this.format, sampledValueDTO.format) &&
        Objects.equals(this.measurand, sampledValueDTO.measurand) &&
        Objects.equals(this.phase, sampledValueDTO.phase) &&
        Objects.equals(this.location, sampledValueDTO.location) &&
        Objects.equals(this.unit, sampledValueDTO.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, context, format, measurand, phase, location, unit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SampledValueDTO {\n");
    
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    measurand: ").append(toIndentedString(measurand)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

