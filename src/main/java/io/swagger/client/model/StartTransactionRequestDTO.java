/*
 * CS Communicator REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AbstractMessageDTO;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * StartTransactionRequestDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:06:01.588+01:00")
public class StartTransactionRequestDTO extends AbstractMessageDTO {
  @SerializedName("remoteAddress")
  private String remoteAddress = null;

  @SerializedName("centralSystemRequestedAt")
  private OffsetDateTime centralSystemRequestedAt = null;

  @SerializedName("externalConnectorId")
  private Integer externalConnectorId = null;

  @SerializedName("idTag")
  private String idTag = null;

  @SerializedName("meterStart")
  private Integer meterStart = null;

  @SerializedName("reservationId")
  private Integer reservationId = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  public StartTransactionRequestDTO remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

   /**
   * Get remoteAddress
   * @return remoteAddress
  **/
  @ApiModelProperty(value = "")
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }

  public StartTransactionRequestDTO centralSystemRequestedAt(OffsetDateTime centralSystemRequestedAt) {
    this.centralSystemRequestedAt = centralSystemRequestedAt;
    return this;
  }

   /**
   * Get centralSystemRequestedAt
   * @return centralSystemRequestedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCentralSystemRequestedAt() {
    return centralSystemRequestedAt;
  }

  public void setCentralSystemRequestedAt(OffsetDateTime centralSystemRequestedAt) {
    this.centralSystemRequestedAt = centralSystemRequestedAt;
  }

  public StartTransactionRequestDTO externalConnectorId(Integer externalConnectorId) {
    this.externalConnectorId = externalConnectorId;
    return this;
  }

   /**
   * Get externalConnectorId
   * @return externalConnectorId
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getExternalConnectorId() {
    return externalConnectorId;
  }

  public void setExternalConnectorId(Integer externalConnectorId) {
    this.externalConnectorId = externalConnectorId;
  }

  public StartTransactionRequestDTO idTag(String idTag) {
    this.idTag = idTag;
    return this;
  }

   /**
   * Get idTag
   * @return idTag
  **/
  @ApiModelProperty(required = true, value = "")
  public String getIdTag() {
    return idTag;
  }

  public void setIdTag(String idTag) {
    this.idTag = idTag;
  }

  public StartTransactionRequestDTO meterStart(Integer meterStart) {
    this.meterStart = meterStart;
    return this;
  }

   /**
   * Get meterStart
   * @return meterStart
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getMeterStart() {
    return meterStart;
  }

  public void setMeterStart(Integer meterStart) {
    this.meterStart = meterStart;
  }

  public StartTransactionRequestDTO reservationId(Integer reservationId) {
    this.reservationId = reservationId;
    return this;
  }

   /**
   * Get reservationId
   * @return reservationId
  **/
  @ApiModelProperty(value = "")
  public Integer getReservationId() {
    return reservationId;
  }

  public void setReservationId(Integer reservationId) {
    this.reservationId = reservationId;
  }

  public StartTransactionRequestDTO timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @ApiModelProperty(required = true, value = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartTransactionRequestDTO startTransactionRequestDTO = (StartTransactionRequestDTO) o;
    return Objects.equals(this.remoteAddress, startTransactionRequestDTO.remoteAddress) &&
        Objects.equals(this.centralSystemRequestedAt, startTransactionRequestDTO.centralSystemRequestedAt) &&
        Objects.equals(this.externalConnectorId, startTransactionRequestDTO.externalConnectorId) &&
        Objects.equals(this.idTag, startTransactionRequestDTO.idTag) &&
        Objects.equals(this.meterStart, startTransactionRequestDTO.meterStart) &&
        Objects.equals(this.reservationId, startTransactionRequestDTO.reservationId) &&
        Objects.equals(this.timestamp, startTransactionRequestDTO.timestamp) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteAddress, centralSystemRequestedAt, externalConnectorId, idTag, meterStart, reservationId, timestamp, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartTransactionRequestDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    centralSystemRequestedAt: ").append(toIndentedString(centralSystemRequestedAt)).append("\n");
    sb.append("    externalConnectorId: ").append(toIndentedString(externalConnectorId)).append("\n");
    sb.append("    idTag: ").append(toIndentedString(idTag)).append("\n");
    sb.append("    meterStart: ").append(toIndentedString(meterStart)).append("\n");
    sb.append("    reservationId: ").append(toIndentedString(reservationId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

