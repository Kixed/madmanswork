/*
 * CS Communicator REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.AbstractMessageDTO;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * StatusNotificationRequestDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:06:01.588+01:00")
public class StatusNotificationRequestDTO extends AbstractMessageDTO {
  @SerializedName("remoteAddress")
  private String remoteAddress = null;

  @SerializedName("centralSystemRequestedAt")
  private OffsetDateTime centralSystemRequestedAt = null;

  @SerializedName("externalConnectorId")
  private Integer externalConnectorId = null;

  /**
   * Gets or Sets errorCode
   */
  @JsonAdapter(ErrorCodeEnum.Adapter.class)
  public enum ErrorCodeEnum {
    CONNECTOR_LOCK_FAILURE("CONNECTOR_LOCK_FAILURE"),
    
    EV_COMMUNICATION_ERROR("EV_COMMUNICATION_ERROR"),
    
    GROUND_FAILURE("GROUND_FAILURE"),
    
    HIGH_TEMPERATURE("HIGH_TEMPERATURE"),
    
    INTERNAL_ERROR("INTERNAL_ERROR"),
    
    LOCAL_LIST_CONFLICT("LOCAL_LIST_CONFLICT"),
    
    NO_ERROR("NO_ERROR"),
    
    OTHER_ERROR("OTHER_ERROR"),
    
    OVER_CURRENT_FAILURE("OVER_CURRENT_FAILURE"),
    
    POWER_METER_FAILURE("POWER_METER_FAILURE"),
    
    POWER_SWITCH_FAILURE("POWER_SWITCH_FAILURE"),
    
    READER_FAILURE("READER_FAILURE"),
    
    RESET_FAILURE("RESET_FAILURE"),
    
    UNDER_VOLTAGE("UNDER_VOLTAGE"),
    
    OVER_VOLTAGE("OVER_VOLTAGE"),
    
    WEAK_SIGNAL("WEAK_SIGNAL");

    private String value;

    ErrorCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCodeEnum fromValue(String text) {
      for (ErrorCodeEnum b : ErrorCodeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ErrorCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ErrorCodeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("errorCode")
  private ErrorCodeEnum errorCode = null;

  @SerializedName("info")
  private String info = null;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    AVAILABLE("AVAILABLE"),
    
    PREPARING("PREPARING"),
    
    CHARGING("CHARGING"),
    
    SUSPENDED_EVSE("SUSPENDED_EVSE"),
    
    SUSPENDED_EV("SUSPENDED_EV"),
    
    FINISHING("FINISHING"),
    
    OCCUPIED("OCCUPIED"),
    
    RESERVED("RESERVED"),
    
    UNAVAILABLE("UNAVAILABLE"),
    
    FAULTED("FAULTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("vendorId")
  private String vendorId = null;

  @SerializedName("vendorErrorCode")
  private String vendorErrorCode = null;

  public StatusNotificationRequestDTO remoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

   /**
   * Get remoteAddress
   * @return remoteAddress
  **/
  @ApiModelProperty(value = "")
  public String getRemoteAddress() {
    return remoteAddress;
  }

  public void setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
  }

  public StatusNotificationRequestDTO centralSystemRequestedAt(OffsetDateTime centralSystemRequestedAt) {
    this.centralSystemRequestedAt = centralSystemRequestedAt;
    return this;
  }

   /**
   * Get centralSystemRequestedAt
   * @return centralSystemRequestedAt
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getCentralSystemRequestedAt() {
    return centralSystemRequestedAt;
  }

  public void setCentralSystemRequestedAt(OffsetDateTime centralSystemRequestedAt) {
    this.centralSystemRequestedAt = centralSystemRequestedAt;
  }

  public StatusNotificationRequestDTO externalConnectorId(Integer externalConnectorId) {
    this.externalConnectorId = externalConnectorId;
    return this;
  }

   /**
   * Get externalConnectorId
   * @return externalConnectorId
  **/
  @ApiModelProperty(required = true, value = "")
  public Integer getExternalConnectorId() {
    return externalConnectorId;
  }

  public void setExternalConnectorId(Integer externalConnectorId) {
    this.externalConnectorId = externalConnectorId;
  }

  public StatusNotificationRequestDTO errorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Get errorCode
   * @return errorCode
  **/
  @ApiModelProperty(required = true, value = "")
  public ErrorCodeEnum getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(ErrorCodeEnum errorCode) {
    this.errorCode = errorCode;
  }

  public StatusNotificationRequestDTO info(String info) {
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @ApiModelProperty(value = "")
  public String getInfo() {
    return info;
  }

  public void setInfo(String info) {
    this.info = info;
  }

  public StatusNotificationRequestDTO status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @ApiModelProperty(required = true, value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public StatusNotificationRequestDTO timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public StatusNotificationRequestDTO vendorId(String vendorId) {
    this.vendorId = vendorId;
    return this;
  }

   /**
   * Get vendorId
   * @return vendorId
  **/
  @ApiModelProperty(value = "")
  public String getVendorId() {
    return vendorId;
  }

  public void setVendorId(String vendorId) {
    this.vendorId = vendorId;
  }

  public StatusNotificationRequestDTO vendorErrorCode(String vendorErrorCode) {
    this.vendorErrorCode = vendorErrorCode;
    return this;
  }

   /**
   * Get vendorErrorCode
   * @return vendorErrorCode
  **/
  @ApiModelProperty(value = "")
  public String getVendorErrorCode() {
    return vendorErrorCode;
  }

  public void setVendorErrorCode(String vendorErrorCode) {
    this.vendorErrorCode = vendorErrorCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusNotificationRequestDTO statusNotificationRequestDTO = (StatusNotificationRequestDTO) o;
    return Objects.equals(this.remoteAddress, statusNotificationRequestDTO.remoteAddress) &&
        Objects.equals(this.centralSystemRequestedAt, statusNotificationRequestDTO.centralSystemRequestedAt) &&
        Objects.equals(this.externalConnectorId, statusNotificationRequestDTO.externalConnectorId) &&
        Objects.equals(this.errorCode, statusNotificationRequestDTO.errorCode) &&
        Objects.equals(this.info, statusNotificationRequestDTO.info) &&
        Objects.equals(this.status, statusNotificationRequestDTO.status) &&
        Objects.equals(this.timestamp, statusNotificationRequestDTO.timestamp) &&
        Objects.equals(this.vendorId, statusNotificationRequestDTO.vendorId) &&
        Objects.equals(this.vendorErrorCode, statusNotificationRequestDTO.vendorErrorCode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteAddress, centralSystemRequestedAt, externalConnectorId, errorCode, info, status, timestamp, vendorId, vendorErrorCode, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusNotificationRequestDTO {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    remoteAddress: ").append(toIndentedString(remoteAddress)).append("\n");
    sb.append("    centralSystemRequestedAt: ").append(toIndentedString(centralSystemRequestedAt)).append("\n");
    sb.append("    externalConnectorId: ").append(toIndentedString(externalConnectorId)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    vendorId: ").append(toIndentedString(vendorId)).append("\n");
    sb.append("    vendorErrorCode: ").append(toIndentedString(vendorErrorCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

