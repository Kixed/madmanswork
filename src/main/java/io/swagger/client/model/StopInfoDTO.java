/*
 * CS Communicator REST API
 * ## Authentication options  ### OAuth2 / OpenID Connect  The supported authentication method is OpenID Connect via Keycloak. For testing APIs via Swaggerhub or Swagger UI, please use **client_id** `swagger`.  When developing applications against this API, a separate client application must be registered in Keycloak.  ### X-Token header authentication  Internal use only, deprecated. The core services use these authentication headers for system account based requests.  
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * StopInfoDTO
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-03-12T19:06:01.588+01:00")
public class StopInfoDTO {
  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("uniqueMessageId")
  private String uniqueMessageId = null;

  /**
   * Gets or Sets stopReason
   */
  @JsonAdapter(StopReasonEnum.Adapter.class)
  public enum StopReasonEnum {
    EMERGENCY_STOP("EMERGENCY_STOP"),
    
    EV_DISCONNECTED("EV_DISCONNECTED"),
    
    HARD_RESET("HARD_RESET"),
    
    LOCAL("LOCAL"),
    
    OTHER("OTHER"),
    
    POWER_LOSS("POWER_LOSS"),
    
    REBOOT("REBOOT"),
    
    REMOTE("REMOTE"),
    
    SOFT_RESET("SOFT_RESET"),
    
    UNLOCK_COMMAND("UNLOCK_COMMAND"),
    
    DE_AUTHORIZED("DE_AUTHORIZED"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    StopReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StopReasonEnum fromValue(String text) {
      for (StopReasonEnum b : StopReasonEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StopReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StopReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StopReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StopReasonEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("stopReason")
  private StopReasonEnum stopReason = null;

  @SerializedName("idTag")
  private String idTag = null;

  /**
   * Gets or Sets authorizationStatus
   */
  @JsonAdapter(AuthorizationStatusEnum.Adapter.class)
  public enum AuthorizationStatusEnum {
    ACCEPTED("ACCEPTED"),
    
    BLOCKED("BLOCKED"),
    
    EXPIRED("EXPIRED"),
    
    INVALID("INVALID"),
    
    CONCURRENT_TX("CONCURRENT_TX");

    private String value;

    AuthorizationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationStatusEnum fromValue(String text) {
      for (AuthorizationStatusEnum b : AuthorizationStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AuthorizationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return AuthorizationStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("authorizationStatus")
  private AuthorizationStatusEnum authorizationStatus = null;

  @SerializedName("meterWattHours")
  private Integer meterWattHours = null;

  public StopInfoDTO timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public StopInfoDTO uniqueMessageId(String uniqueMessageId) {
    this.uniqueMessageId = uniqueMessageId;
    return this;
  }

   /**
   * Get uniqueMessageId
   * @return uniqueMessageId
  **/
  @ApiModelProperty(value = "")
  public String getUniqueMessageId() {
    return uniqueMessageId;
  }

  public void setUniqueMessageId(String uniqueMessageId) {
    this.uniqueMessageId = uniqueMessageId;
  }

  public StopInfoDTO stopReason(StopReasonEnum stopReason) {
    this.stopReason = stopReason;
    return this;
  }

   /**
   * Get stopReason
   * @return stopReason
  **/
  @ApiModelProperty(value = "")
  public StopReasonEnum getStopReason() {
    return stopReason;
  }

  public void setStopReason(StopReasonEnum stopReason) {
    this.stopReason = stopReason;
  }

  public StopInfoDTO idTag(String idTag) {
    this.idTag = idTag;
    return this;
  }

   /**
   * Get idTag
   * @return idTag
  **/
  @ApiModelProperty(value = "")
  public String getIdTag() {
    return idTag;
  }

  public void setIdTag(String idTag) {
    this.idTag = idTag;
  }

  public StopInfoDTO authorizationStatus(AuthorizationStatusEnum authorizationStatus) {
    this.authorizationStatus = authorizationStatus;
    return this;
  }

   /**
   * Get authorizationStatus
   * @return authorizationStatus
  **/
  @ApiModelProperty(value = "")
  public AuthorizationStatusEnum getAuthorizationStatus() {
    return authorizationStatus;
  }

  public void setAuthorizationStatus(AuthorizationStatusEnum authorizationStatus) {
    this.authorizationStatus = authorizationStatus;
  }

  public StopInfoDTO meterWattHours(Integer meterWattHours) {
    this.meterWattHours = meterWattHours;
    return this;
  }

   /**
   * Get meterWattHours
   * @return meterWattHours
  **/
  @ApiModelProperty(value = "")
  public Integer getMeterWattHours() {
    return meterWattHours;
  }

  public void setMeterWattHours(Integer meterWattHours) {
    this.meterWattHours = meterWattHours;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StopInfoDTO stopInfoDTO = (StopInfoDTO) o;
    return Objects.equals(this.timestamp, stopInfoDTO.timestamp) &&
        Objects.equals(this.uniqueMessageId, stopInfoDTO.uniqueMessageId) &&
        Objects.equals(this.stopReason, stopInfoDTO.stopReason) &&
        Objects.equals(this.idTag, stopInfoDTO.idTag) &&
        Objects.equals(this.authorizationStatus, stopInfoDTO.authorizationStatus) &&
        Objects.equals(this.meterWattHours, stopInfoDTO.meterWattHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, uniqueMessageId, stopReason, idTag, authorizationStatus, meterWattHours);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StopInfoDTO {\n");
    
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uniqueMessageId: ").append(toIndentedString(uniqueMessageId)).append("\n");
    sb.append("    stopReason: ").append(toIndentedString(stopReason)).append("\n");
    sb.append("    idTag: ").append(toIndentedString(idTag)).append("\n");
    sb.append("    authorizationStatus: ").append(toIndentedString(authorizationStatus)).append("\n");
    sb.append("    meterWattHours: ").append(toIndentedString(meterWattHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

